head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2006.08.16.12.57.49;	author ensmjc;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.10.08.42.42;	author ensmjc;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.09.14.30.18;	author ensmjc;	state Exp;
branches;
next	;


desc
@Definitions for quadratur rules
@


1.3
log
@*** empty log message ***
@
text
@#ifndef _GAUSS_H_INCLUDED_
#define _GAUSS_H_INCLUDED_

#include <glib.h>

#ifdef _GQR_USE_MPFR_
#include <mpfr.h>
#ifndef GQR_MPFR_BITS
#define GQR_MPFR_BITS 128
#define GQR_MPFR_ROUND_MODE GMP_RNDN
#endif
#endif /*_GQR_USE_MPFR_*/

typedef gdouble (*gqr_func)(gdouble, gint, gpointer) ;

typedef enum {
  GQR_GAUSS_LEGENDRE = 1,
  GQR_GAUSS_CHEBYSHEV_1 = 2,
  GQR_GAUSS_CHEBYSHEV_2 = 3,
  GQR_GAUSS_HERMITE = 4,
  GQR_GAUSS_LAGUERRE = 5,
  GQR_GAUSS_JACOBI = 6,
  GQR_GAUSS_LOGARITHMIC = 1 << 8,
  GQR_GAUSS_SINGULAR = 1 << 9,
  GQR_GAUSS_HYPERSINGULAR = 1 << 10
} gqr_t ;

#define GQR_SINGULARITY_MASK \
(GQR_GAUSS_LOGARITHMIC | GQR_GAUSS_SINGULAR | GQR_GAUSS_HYPERSINGULAR)

#define GQR_RULE_MASK 255

typedef struct {
  gqr_t type ;
  gint i[8], ni, nf ;
  gdouble f[8] ;
} gqr_parameter_t ;

typedef struct {
  gqr_t type ;
  gint n, nmax ;
  gdouble *x, *w, a, b ;
} gqr_rule_t ;

#define gqr_rule_length(g) (g->n)
#define gqr_rule_abscissa(g,_i) (g->x[(_i)])
#define gqr_rule_weight(g,_i) (g->w[(_i)])
#define gqr_rule_type(g) (g->type)
#define gqr_parameter_int(p,_i) (p->i[(_i)])
#define gqr_parameter_double(p,_i) (p->f[(_i)])
#define gqr_parameter_clear(p) ((p)->ni=(p)->nf=0)
#define gqr_parameter_set_double(p,_f) ((p)->f[((p)->nf)++] = (_f))
#define gqr_parameter_set_int(p,_i) ((p)->i[((p)->ni)++] = (_i))

gint gqr_rule_free(gqr_rule_t *g) ;
gqr_rule_t *gqr_rule_alloc(gint n) ;
gqr_rule_t *gqr_rule_realloc(gqr_rule_t *g, gint n) ;
gint gqr_rule_write(gqr_rule_t *g, FILE *f) ;
gint gqr_rule_select(gqr_rule_t *g, gqr_t type, gint n, 
		     gqr_parameter_t *p) ;
gint gqr_rule_scale(gqr_rule_t *g, gdouble a, gdouble b,
		    gdouble *xbar, gdouble *dx) ;
gdouble gqr_finite_part(gdouble a, gdouble b, gdouble y, gdouble g) ;
gdouble gqr_finite_part_integral(gqr_func f, gpointer data,
				 gdouble y, gdouble gm,
				 gdouble a, gdouble b, gqr_rule_t *g) ;
gdouble gqr_finite_part_1mt_n(gint n, gint m) ;
gdouble gqr_legendre_dPdx(gdouble x, gint n, gint m) ;
gdouble gqr_finite_part_Pn1(gint n, gint m) ;
gdouble gqr_finite_part_Pn_log(gdouble x, gint n) ;
gchar *gqr_rule_name(gqr_t type) ;

#endif /*_GAUSS_H_INCLUDED_*/
@


1.2
log
@Modified quadrature selection scheme to SINGULARITY | WEIGHTING
@
text
@d6 8
a69 1
gdouble gqr_finite_part_tn_log(gdouble x, gint n) ;
@


1.1
log
@Initial revision
@
text
@d9 9
a17 3
  GQR_LEGENDRE,
  GQR_KOLM_ROKHLIN,
  GQR_LOGARITHMIC_SMITH
d20 5
a36 1

d44 2
a45 2
#define gqr_parameter_set_double(p,_f) ((p)->f[((p)->nf)++] = _f)
#define gqr_parameter_set_int(p,_i) ((p)->i[((p)->ni)++] = _i)
d64 1
@
