head	1.1;
access;
symbols;
locks
	michael:1.1; strict;
comment	@ * @;


1.1
date	2007.01.30.22.06.17;	author michael;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#include <stdio.h>
#include <math.h>

#include <glib.h>

#include <gsl/gsl_math.h>
#include <gsl/gsl_sf.h>

#include "gqr.h"

gint _gqr_legendre_singular(gint N, gint x, gint m, gdouble *I) ;
gint _gqr_quad_log(gint N, gdouble x, gdouble y, gdouble *I) ;
gint _gqr_quad_1_r(gint N, gdouble x, gdouble y, gdouble *I) ;
gint _gqr_quad_2_r(gint N, gdouble x, gdouble y, gdouble *I) ;
gint _grule_legendre(gint n, gdouble *x, gdouble *w) ;
gint _grule_multi_singular(gint n, gint m, gdouble x,
			   gint ns, gint *s, 
			   gdouble *xk, gdouble *wt) ;
gint _grule_multi_nsingular(gint n, gint m, gdouble x, gdouble y,
			   gint ns, gint *s, 
			   gdouble *xk, gdouble *wt) ;
gint _gqr_lsqr_min_norm(gdouble *A, gint m, gint n, gdouble *b, 
			gint nb) ;

gdouble _legendre_func(gdouble t, gint d, gint *m)

{
  if ( d == 0 ) return gsl_sf_legendre_Pl(*m, t) ;

  g_assert(t == -1.0) ;

  if ( d > *m ) return 0.0 ;
  
  return (gsl_sf_pow_int(-1,*m-d)*gsl_sf_pow_int(0.5,d)*
	  gsl_sf_fact(*m+d)/gsl_sf_fact(d)/gsl_sf_fact(*m-d)) ;

}

/** 
 * Compute a quadrature rule for the integration of functions with
 * singularities and near-singularities of various orders.
 *
 * @@param n number of points in quadrature rule
 * @@param m maximum order of polynomial to integrate
 * @@param x position of singularity
 * @@param y position of singularity
 * @@param xk abscissae of quadrature rule
 * @@param wt weights of quadrature rule
 * 
 * @@return 0 on success
 */

gint _grule_multi_nsingular(gint n, gint m, gdouble x, gdouble y,
			    gint nsing, gint *s, 
			    gdouble *xk, gdouble *wt)
			 
{
  gdouble *P, *I ;
  gdouble R ;
  gint i, j, k, ns ;
  gdouble *psi, *M ;

  ns = nsing+1 ;
  _grule_legendre(n, xk, wt) ;
  P = (gdouble *)g_malloc(n*n*sizeof(gdouble)) ;
  M = (gdouble *)g_malloc(MAX(ns*m,n)*sizeof(gdouble)) ;
  psi = (gdouble *)g_malloc(ns*m*n*sizeof(gdouble)) ;
  I = (gdouble *)g_malloc(2*m*sizeof(gdouble)) ;

  for ( i = 0 ; i < ns*m*n ; i ++ ) psi[i] = 0.0 ;
  i = 0 ; 
  for ( j = 0 ; j < n ; j ++ ) {
    P[i*n + j] = 1.0 ; P[(i+1)*n + j] = xk[j] ;
  }

  for ( i = 1 ; i < m-1 ; i ++ ) {
    for ( j = 0 ; j < n ; j ++ ) {
      P[(i+1)*n + j] = 
	((gdouble)(2*i+1)*xk[j]*P[i*n+j] - 
	 (gdouble)i*P[(i-1)*n+j])/(gdouble)(i+1) ;
    }
  }

  M[0*m+0] = 2.0 ;
  for ( i = 1 ; i < m ; i ++ ) M[0*m+i] = 0.0 ;

  for ( k = 0 ; k < nsing ; k ++ ) {
    switch(s[k]) {
    case 0:
      _gqr_quad_log(m, x, fabs(y), I) ;
      gqr_legendre_integrals(m, I, &(M[(k+1)*m])) ;
      break ;
    case 1:
      _gqr_quad_1_r(m, x, fabs(y), I) ;
      gqr_legendre_integrals(m, I, &(M[(k+1)*m])) ;
      break ;      
    case 2:
      _gqr_quad_2_r(m, x, fabs(y), I) ;
      gqr_legendre_integrals(m, I, &(M[(k+1)*m])) ;
      break ;
    default: g_assert_not_reached() ; break ;
    }
  } 

  for ( i = 0 ; i < n ; i ++ ) {
    R = sqrt((x-xk[i])*(x-xk[i])+y*y) ;
    for ( j = 0 ; j < m ; j ++ ) {
      psi[i*ns*m+j+0*m] = P[j*n+i] ;
    }
  }

  for ( k = 0 ; k < nsing ; k ++ ) {
    switch(s[k]) {
    case 0:
      for ( i = 0 ; i < n ; i ++ ) {
	R = sqrt((x-xk[i])*(x-xk[i])+y*y) ;
	for ( j = 0 ; j < m ; j ++ ) {
	  psi[i*ns*m+j+(k+1)*m] = psi[i*ns*m+j+0*m]*log(R) ;
	}
      }
      break ;
    default:
      for ( i = 0 ; i < n ; i ++ ) {
	R = sqrt((x-xk[i])*(x-xk[i])+y*y) ;
	for ( j = 0 ; j < m ; j ++ ) {
	  psi[i*ns*m+j+(k+1)*m] = psi[i*ns*m+j+0*m]/gsl_pow_int(R,s[k]) ;
	}
      }
      break ;      
    }
  }

  _gqr_lsqr_min_norm(psi, ns*m, n, M, MAX(ns*m,n)) ;

  for ( i = 0 ; i < n ; i ++ ) wt[i] = M[i] ;

  g_free(P) ; g_free(M) ; g_free(I) ; 

  return 0 ;
}


gint _grule_multi_singular(gint n, gint m, gdouble x,
			   gint nsing, gint *s,
			   gdouble *xk, gdouble *wt)
			 
{
  gdouble *fp2 ;
  gdouble *P, *Q, *Px, *dPx ;
  gdouble Pn, Pnm1, Pnp1 ;
  gdouble *fp, pv ;
  gdouble t ;
  gqr_rule_t *g, *h ;
  gint i, j, k, ss, ns ;
  gint smax ;
  gdouble *psi, *M ;

  ns = nsing + 1 ;
  g = gqr_rule_alloc(n) ;
  gqr_rule_select(g, GQR_GAUSS_LEGENDRE, n, NULL) ;
  h = gqr_rule_alloc(2*m) ;
  gqr_rule_select(h, GQR_GAUSS_LEGENDRE, 2*m, NULL) ;
  k = gqr_rule_length(g) ;
  Px = (gdouble *)g_malloc((m+2)*sizeof(gdouble)) ;
  dPx = (gdouble *)g_malloc((m+1)*sizeof(gdouble)) ;
  P = (gdouble *)g_malloc((n+1)*k*sizeof(gdouble)) ;
  Q = (gdouble *)g_malloc(2*(n+2)*sizeof(gdouble)) ;
  M = (gdouble *)g_malloc(MAX(ns*m,n)*sizeof(gdouble)) ;
  psi = (gdouble *)g_malloc(ns*m*n*sizeof(gdouble)) ;
  fp2 = (gdouble *)g_malloc(ns*n*sizeof(gdouble)) ;

  smax = 0 ;
  for ( i = 0 ; i < nsing ; i ++ ) smax = MAX(smax,s[i]) ;
  fp = (gdouble *)g_malloc((smax+1)*sizeof(gdouble)) ;

  for ( i = 0 ; i < ns*m*n ; i ++ ) psi[i] = 0.0 ;
  i = 0 ; 
  for ( j = 0 ; j < k ; j ++ ) {
    P[i*k + j] = 1.0 ;
    P[(i+1)*k + j] = gqr_rule_abscissa(g,j) ;
  }
  if ( ( x != -1.0 ) && ( x != 1.0 ) ) {
    Q[0] = 0.5*log(fabs((x+1)/(x-1))) ; Q[1] = x*Q[0] - 1.0 ;
  } else {
    Q[0] = M_LN2 ; Q[1] = M_LN2 - 0.5 ;
  }

  for ( i = 1 ; i < n ; i ++ ) {
    for ( j = 0 ; j < k ; j ++ ) {
      P[(i+1)*k + j] = 
	((gdouble)(2*i+1)*gqr_rule_abscissa(g,j)*P[i*k+j] - 
	 (gdouble)i*P[(i-1)*k+j])/(gdouble)(i+1) ;
    }
    Q[i+1] = ((gdouble)(2*i+1)*x*Q[i] - (gdouble)i*Q[i-1])/(gdouble)(i+1) ;
  }
  i = n ;
  Q[i+1] = ((gdouble)(2*i+1)*x*Q[i] - (gdouble)i*Q[i-1])/(gdouble)(i+1) ;

  Px[0] = 1.0 ; Px[1] = x ;
  for ( i = 1 ; i <= m ; i ++ ) {
    Px[i+1] = ((gdouble)(2*i+1)*x*Px[i] - (gdouble)i*Px[i-1])/(gdouble)(i+1) ;
  }

  dPx[0] = 0.0 ; dPx[1] = 1.0 ;
  if ( (x == 1.0) || (x == -1.0) ) 
    for ( i = 1 ; i < m ; i ++ )
      dPx[i+1] = x*gsl_pow_int(x,i+1)*0.5*(gdouble)((i+1)*(i+2)) ;
  else
    for ( i = 1 ; i < m ; i ++ )
      dPx[i+1] = (i+1)*(x*Px[i+1] - Px[i])/(x*x-1.0) ; 

  if ( (x == 1.0) || (x == -1.0) ) fp2[0] = 2.0*M_LN2 - 2.0 ;
  else fp2[0] = 2*Q[1] + log(fabs(x*x-1.0)) ;

  if ( (x == 1.0) || (x == -1.0) ) 
    for ( i = 1 ; i < n ; i ++ ) fp2[i] = gqr_finite_part_Pn_log(x,i) ;
  else
    for ( i = 1 ; i < n ; i ++ ) fp2[i] = 2.0/(2.0*i+1)*(Q[i+1]-Q[i-1]) ;

  pv = gqr_finite_part(-1, 1, x, 1.0) ;
  for ( i = 1 ; i <= smax ; i ++ ) 
    fp[i] = gqr_finite_part(-1, 1, x, (gdouble)i) ;

  /*fill the unweighted Legendre polynomial entries*/
  for ( i = 0 ; i < m ; i ++ ) M[i] = 0.0 ;
  M[0*m+0] = 2.0 ;

  for ( i = 0 ; i < n ; i ++ ) {
    t = gqr_rule_abscissa(g,i) ;
    for ( j = 0 ; j < m ; j ++ ) psi[i*ns*m+j+0*m] = P[j*k+i] ;
  }

  for ( ss = 0 ; ss < nsing ; ss ++ ) {
    if ( s[ss] == 0 ) {
      for ( i = 0 ; i < m ; i ++ ) M[(ss+1)*m+i] = fp2[i] ;
      for ( i = 0 ; i < n ; i ++ ) {
	t = gqr_rule_abscissa(g,i) ;
	for ( j = 0 ; j < m ; j ++ )
	  psi[i*ns*m+j+(ss+1)*m] = psi[i*ns*m+j+0*m]*log(fabs(x-t)) ;
      }
    } else {
      for ( i = 0 ; i < m ; i ++ ) 
	M[(ss+1)*m+i] = gqr_finite_part_integral(_legendre_func, &i,
						 x, (gdouble)s[ss], -1, 1, h) ;

      for ( i = 0 ; i < n ; i ++ ) {
	t = gqr_rule_abscissa(g,i) ;
	for ( j = 0 ; j < m ; j ++ ) 
	  psi[i*ns*m+j+(ss+1)*m] = 
	    psi[i*ns*m+j+0*m]/gsl_sf_pow_int(x-t, s[ss]) ;
      }
    }
  }

#if 0
  for ( ss = 0 ; ss < nsing ; ss ++ ) {
    switch (s[ss]) {
    default: g_assert_not_reached() ; break ;
    case 0:
      for ( i = 0 ; i < m ; i ++ ) M[(ss+1)*m+i] = fp2[i] ;
      for ( i = 0 ; i < n ; i ++ ) {
	t = gqr_rule_abscissa(g,i) ;
	for ( j = 0 ; j < m ; j ++ )
	  psi[i*ns*m+j+(ss+1)*m] = psi[i*ns*m+j+0*m]*log(fabs(x-t)) ;
      }
      break ;
    case 1:
      for ( i = 0 ; i < m ; i ++ ) M[(ss+1)*m+i] = Px[i]*pv ;
      for ( i = 0 ; i < m ; i ++ ) {
	t = gqr_rule_abscissa(h, i) ;
	Pnm1 = 1.0 ; Pn = t ;
	for ( j = 1 ; j < m ; j ++ ) {
	  M[(ss+1)*m+j] += gqr_rule_weight(h,i)*(Pn-Px[j])/(x-t) ;
	  Pnp1 = ((gdouble)(2*j+1)*gqr_rule_abscissa(h, i)*Pn -
		  (gdouble)j*Pnm1)/(gdouble)(j+1) ;
	  Pnm1 = Pn ; Pn = Pnp1 ;
	}
      }
      
      for ( i = 0 ; i < n ; i ++ ) {
	t = gqr_rule_abscissa(g,i) ;
	for ( j = 0 ; j < m ; j ++ )
	  psi[i*ns*m+j+(ss+1)*m] = psi[i*ns*m+j+0*m]/(x-t) ;
      }
      break ;
    case 2:
      for ( i = 0 ; i < m ; i ++ ) 
	M[(ss+1)*m+i] = Px[i]*fp[s[ss]] - dPx[i]*pv ;
      for ( i = 0 ; i < m ; i ++ ) {
	t = gqr_rule_abscissa(h, i) ;
	Pnm1 = 1.0 ; Pn = t ;
	for ( j = 1 ; j < m ; j ++ ) {
	  M[(ss+1)*m+j] += 
	    gqr_rule_weight(h,i)*(Pn-Px[j]+dPx[j]*(x-t))/(x-t)/(x-t) ;
	  Pnp1 = ((gdouble)(2*j+1)*gqr_rule_abscissa(h, i)*Pn -
		  (gdouble)j*Pnm1)/(gdouble)(j+1) ;
	  Pnm1 = Pn ; Pn = Pnp1 ;
	}
      }
      for ( i = 0 ; i < n ; i ++ ) {
	t = gqr_rule_abscissa(g,i) ;
	for ( j = 0 ; j < m ; j ++ )
	  psi[i*ns*m+j+(ss+1)*m] = psi[i*ns*m+j+0*m]/(x-t)/(x-t) ;
      }
      break ;
    }
  }
#endif

  _gqr_lsqr_min_norm(psi, ns*m, n, M, MAX(ns*m,n)) ;

  for ( i = 0 ; i < n ; i ++ ) {
    xk[i] = gqr_rule_abscissa(g,i) ; wt[i] = M[i] ;
  }

  gqr_rule_free(g) ; gqr_rule_free(h) ;
  g_free(P) ; g_free(Q) ;
  g_free(Px) ; g_free(dPx) ;
  g_free(M) ; g_free(fp2) ;
  g_free(fp) ;

  return 0 ;
}
@
