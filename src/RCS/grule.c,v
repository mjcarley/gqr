head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2006.08.16.12.57.49;	author ensmjc;	state Exp;
branches;
next	1.3;

1.3
date	2006.08.14.14.02.59;	author ensmjc;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.10.08.42.42;	author ensmjc;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.09.14.30.18;	author ensmjc;	state Exp;
branches;
next	;


desc
@main routines for quadrature rule evaluations
@


1.4
log
@*** empty log message ***
@
text
@/**
 * @@file   grule.c
 * @@author Michael Carley
 * @@date   Tue Jul  4 12:57:44 2006
 * 
 * @@brief  Gaussian quadrature rule generation and selection functions. 
 * 
 * 
 */


#include <stdio.h>
#include <math.h>

#include <glib.h>

#include "gqr.h"

gint _grule_kolm_rokhlin_new(gint n, gint m, gdouble y,
			     gdouble *x, gdouble *w) ;
gint _grule_legendre(gint n, gdouble *x, gdouble *w) ;
gint _grule_chebyshev_1(gint n, gdouble *x, gdouble *w) ;
gint _grule_chebyshev_2(gint n, gdouble *x, gdouble *w) ;
gint _grule_logarithmic_smith(gint n, gdouble *x, gdouble *w) ;

/** 
 * Allocate a Gaussian quadrature rule.
 * 
 * @@param n maximum length of rule (number of abscissae and weights).
 * 
 * @@return newly allocated rule.
 */

gqr_rule_t *gqr_rule_alloc(gint n)

{
  gqr_rule_t *g ;

  g = (gqr_rule_t *)g_malloc(sizeof(gqr_rule_t)) ;
  g->nmax = n ; g->n = 0 ;

  g->x = (gdouble *)g_malloc(sizeof(gdouble)*n) ;
  g->w = (gdouble *)g_malloc(sizeof(gdouble)*n) ;

  return g ;
}

/** 
 * Reallocate memory for a Gaussian quadrature rule to allow for a
 * change in rule length.
 * 
 * @@param n maximum length of rule (number of abscissae and weights).
 * 
 * @@return newly allocated rule.
 */

gqr_rule_t *gqr_rule_realloc(gqr_rule_t *g, gint n)

{
  if ( g == NULL ) return gqr_rule_alloc(n) ;
  if ( g->nmax >= g->n ) return g ;

  g_free(g->x) ; g_free(g->w) ; g_free(g) ;

  return (gqr_rule_alloc(n)) ;
}

/** 
 * Free all memory associated with a Gaussian quadrature rule.
 * 
 * @@param g rule to be freed.
 * 
 * @@return 0 on success.
 */

gint gqr_rule_free(gqr_rule_t *g)

{
  g_free(g->x) ; g_free(g->w) ; g_free(g) ;
  return 0 ;
}

/** 
 * Write the abscissae and weights of a Gaussian quadrature rule to a
 * file. 
 * 
 * @@param g Gaussian quadrature rule;
 * @@param f file stream to write to.
 * 
 * @@return 0 on success.
 */

gint gqr_rule_write(gqr_rule_t *g, FILE *f)

{
  gint i ;

  for ( i = 0 ; i < gqr_rule_length(g) ; i ++ )
    fprintf(f, "%1.16e %1.16e\n", 
	    gqr_rule_abscissa(g,i),
	    gqr_rule_weight(g,i)) ;
	    

  return 0 ;
}

/** 
 * Fill a Gaussian quadrature rule with abscissae and weights of a
 * chosen type.
 * 
 * @@param g rule to fill;
 * @@param type a gqr_t for the rule;
 * @@param n number of points in rule;
 * @@param p gqr_parameter_t of parameters for rule.
 * 
 * @@return 0 on success.
 */

gint gqr_rule_select(gqr_rule_t *g, gqr_t type, gint n, 
		     gqr_parameter_t *p)

{
  g_assert(n <= g->nmax) ;
  switch (type) {
  default: 
    g_log(G_LOG_DOMAIN, G_LOG_LEVEL_ERROR, 
	  "quadrature rule %d (%s) not implemented ", 
	  type, gqr_rule_name(type)) ;
    break ;
  case GQR_GAUSS_LEGENDRE:
/*     _grule_legendre(n, g->x, g->w) ; g->n = n ; */
    _grule_legendre(n, g->x, g->w) ; g->n = n ;
/*     exit(0) ; */
    g->a = -1 ; g->b = 1 ; g->type = type ;
    break ;
  case GQR_GAUSS_CHEBYSHEV_1:
    _grule_chebyshev_1(n, g->x, g->w) ; g->n = n ;
    g->a = -1 ; g->b = 1 ; g->type = type ;
    break ;
  case GQR_GAUSS_CHEBYSHEV_2:
    _grule_chebyshev_2(n, g->x, g->w) ; g->n = n ;
    g->a = -1 ; g->b = 1 ; g->type = type ;
    break ;
  case GQR_GAUSS_LEGENDRE | GQR_GAUSS_HYPERSINGULAR:
    g_assert(p->ni > 0) ; g_assert(p->nf > 0) ;
    _grule_kolm_rokhlin_new(n, 
			    gqr_parameter_int(p,0), 
			    gqr_parameter_double(p,0),
			    g->x, g->w) ;
    g->a = -1 ; g->b = 1 ; g->n = n ; g->type = type ;
    break ;
  case GQR_GAUSS_LEGENDRE | GQR_GAUSS_LOGARITHMIC:
    if ( (p == NULL) || ((p->ni == 0) && (p->nf == 0)) ) {
      /*if no parameters are specified, default to Smith 
	quadrature rule*/
      _grule_logarithmic_smith(n, g->x, g->w) ;
      g->a = 0.0 ; g->b = 1.0 ; g->n = n ; g->type = type ;
    } else {
      g_assert_not_reached() ;
    }
    break ;
  }

  return 0 ;
}

/** 
 * Set the scaling for a rule so that the integral is approximated by:
 * \f$I\approx\Delta x \sum_{j=0}^{n}w_{j}f(x_{j})\f$ where
 * \f$x=\bar{x}+\Delta x t_{j}\f$. 
 * 
 * @@param g Gaussian quadrature rule;
 * @@param a lower limit of integration;
 * @@param b upper limit of integration;
 * @@param xbar \f$\bar{x}\f$;
 * @@param dx \f$\Delta x\f$.
 * 
 * @@return 0 on success.
 */

gint gqr_rule_scale(gqr_rule_t *g, gdouble a, gdouble b,
		    gdouble *xbar, gdouble *dx)

{
  *dx = (b-a)/(g->b-g->a) ; *xbar = a - (g->a)*(*dx) ;

  return 0 ;
}


gchar *_rule_name_singularity(gqr_t type)

{
  gqr_t t ;

  /*strip the basic information*/
  t = type & GQR_SINGULARITY_MASK ;

  if ( t == 0 ) return "non-singular" ;
  if ( t == GQR_GAUSS_LOGARITHMIC ) return "logarithmic" ;
  if ( t == GQR_GAUSS_SINGULAR ) return "Cauchy singular" ;
  if ( t == GQR_GAUSS_HYPERSINGULAR ) return "hypersingular" ;
    
  return "unknown singularity" ;
}
gchar *_rule_name_base(gqr_t type)

{
  gqr_t t ;

  /*strip the singularity information from the leading bits*/
  t = type & GQR_RULE_MASK ;

  if ( t == GQR_GAUSS_LEGENDRE ) 
    return "Gauss Legendre" ;
  if ( t == GQR_GAUSS_CHEBYSHEV_1 )
    return "Gauss Chebyshev of the first kind" ;
  if ( t == GQR_GAUSS_CHEBYSHEV_2 )
    return "Gauss Chebyshev of the second kind" ;
  if ( t == GQR_GAUSS_HERMITE )
    return "Gauss Hermite" ;
  if ( t == GQR_GAUSS_LAGUERRE )
    return "Gauss Laguerre" ;
  if ( t == GQR_GAUSS_JACOBI )
    return "Gauss Jacobi" ;

  return "unknown" ;
}

gchar *gqr_rule_name(gqr_t type)

{
  gchar *s ;

  s = g_strdup_printf("%s %s",
		      _rule_name_singularity(type),
		      _rule_name_base(type)) ;

  return s ;
}
@


1.3
log
@*** empty log message ***
@
text
@d131 1
d133 1
@


1.2
log
@Modified quadrature selection scheme to SINGULARITY | WEIGHTING
@
text
@a20 2
gint _grule_kolm_rokhlin(gint n, gint m, gdouble y,
			 gdouble *x, gdouble *w) ;
d151 8
a158 2
    _grule_logarithmic_smith(n, g->x, g->w) ;
    g->a = 0.0 ; g->b = 1.0 ; g->n = n ; g->type = type ;
@


1.1
log
@Initial revision
@
text
@d24 2
d127 6
a132 2
  default: g_assert_not_reached() ; break ;
  case GQR_LEGENDRE:    
d136 9
a144 1
  case GQR_KOLM_ROKHLIN:
a149 5
/*     _grule_kolm_rokhlin(n,  */
/* 			gqr_parameter_int(p,0),  */
/* 			gqr_parameter_double(p,0), */
/* 			g->x, g->w) ; */
/*     exit(1) ; */
d152 1
a152 1
  case GQR_LOGARITHMIC_SMITH:
d183 52
@
